#include <stdlib.h>
#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>



void sig_user (int signo);
void child();


/* please note the use of global variables. Global variables are 
 * very dangerous and should only be used when absolutely necessary.
 * this simple example does not justify the use of global variables.
 * It was, however, taken from a much more complicated program, 
 * complicated enough to justify the use of global variables.
 */
static sigset_t newmask, oldmask, zeromask;


int main (void)
{

     

  int pid, status;
   
  /*  stuff for blocking signals */

  if (signal(SIGUSR1, sig_user) == SIG_ERR)
    {
      printf("error creating signal handler \n");
    }
  sigemptyset(&zeromask);
  sigemptyset(&newmask);
  sigaddset(&newmask,SIGUSR1);
  if(sigprocmask(SIG_BLOCK, &newmask, &oldmask) < 0)
    {
      printf("error in sigprocmask \n");
    }

  for (int i = 0; i < 2; i++) {
    
    pid = fork(); 
    
  if (pid < 0)
    {
      printf("fork failed \n");
      exit (-1);
    }/*end if pid < 0 */
  else
    {
      if (pid == 0)
        {
	  
	  child(i);
	  exit(0); /* child must exit so as to not execute 
		      parent stuff */
        }/* end if pid == 0 */
    }/* end else pid < 0*/   
     
	  
  }	  

  printf("parent signalling child %d\n", pid);
  fflush(stdout);
  kill(pid, SIGUSR1);

  printf("parent waiting for child to terminate\n");
  fflush(stdout);
  if(pid=wait( &status)<0)
    {
      printf("waitpid error\n");
    } 
	
  printf("parent terminating \n");
  fflush(stdout);
} /* end of main*/

void child(int b)
{
   
  printf("child %d has control  \n", getpid());
  fflush(stdout);
   
  /* parent created  signal handler */

  
   
  //wait for the signal

   
  sigsuspend(&zeromask); /*wait */
   
  if (sigprocmask(SIG_SETMASK, &oldmask, NULL)<0)
    {
      printf("sigmask error \n");
    }

  if (b == 1) {
    printf("signaling child %d from child %d\n", getpid()-1, getpid());
    fflush(stdout);
    kill(getpid()-1,SIGUSR1);
  }

  
  printf("child %d terminating after signal  \n", getpid());
  fflush(stdout);

}
void sig_user (int signo)
{
  int sing, index;
  if (signo == SIGUSR1)
    {

      printf("signal 1 received by signal handler child  \n");

      fflush(stdout);



    }/* end if */
  
}/* end of signal handler */
